{
  "package_name": "com.steve.todo_tracker",
  "project_description": "The Todo Tracker is a Flutter application that allows users to manage their to-do lists. It features the ability to create, update, and delete todo items, as well as toggle their completion status. The application follows the Stacked architecture and utilizes Stacked for state management, routing, and dependency injection.",
  "architecture_overview": "The application is structured using the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The main components include the App, HomeView, StartupView, and their corresponding ViewModels. The application also makes use of custom bottom sheets and dialogs, which are registered and managed through the app setup.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the application's state and functionality. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architectural pattern used in the Flutter application.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void initialize()\n  +void dispose()\n}\nAppViewModel ..|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the AppViewModel and sets up any necessary state or dependencies.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Cleans up and disposes of any resources or state managed by the AppViewModel.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This Dart file is responsible for setting up the dialogue UI and managing the registration of custom dialogue builders for the application. It provides a centralized location to configure and control the various dialogue types used throughout the app.",
      "class_diagram": "@startuml\n'automate\n\nclass DialogService {\n  registerCustomDialogBuilders(builders: Map<DialogType, DialogBuilder>)\n}\n\nclass InfoAlertDialog {\n  request: DialogRequest\n  completer: DialogCompleter\n}\n\nDialogService ..> InfoAlertDialog : Registers\nDialogService *-> DialogType : Manages\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the DialogService by registering custom dialogue builders for each DialogType. This ensures that the appropriate dialogue UI is displayed when a specific DialogType is requested.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "This Dart file defines the `Todo` class, which represents a single task or item in a to-do list application. The `Todo` class encapsulates the key information and state related to a todo item, including its unique identifier, title, description, completion status, creation date, and optional completion date.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String title\n  +String description\n  +bool isCompleted\n  +DateTime createdAt\n  +DateTime? completedAt\n  +Todo copyWith()\n  +Map<String, dynamic> toJson()\n  +factory Todo.fromJson(Map<String, dynamic>)\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "This method creates a new `Todo` instance with the specified changes to the properties, allowing for easy modification and updates to a `Todo` object.",
          "parameters": [
            "String?",
            "String?",
            "String?",
            "bool?",
            "DateTime?",
            "DateTime?"
          ],
          "return_type": "Todo"
        },
        {
          "name": "toJson",
          "description": "This method converts the `Todo` object into a JSON-serializable map, allowing the todo data to be easily stored, transmitted, or persisted.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "This factory method creates a new `Todo` instance from a JSON map, allowing for easy deserialization of todo data.",
          "parameters": [
            "Map<String, dynamic>"
          ],
          "return_type": "Todo"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/add_todo_form.dart",
      "description": "The AddTodoForm class is responsible for providing a user interface for creating and updating todo items. It allows the user to enter a title and description for a new todo, and provides a submit button to save the todo. The class also supports pre-populating the form fields with an existing todo item, enabling users to edit and update existing todos.",
      "class_diagram": "@startuml\nclass AddTodoForm extends StatefulWidget {\n  final Todo? initialTodo\n  final Function(Todo) onSubmit\n}\n\nclass AddTodoFormState extends State<AddTodoForm> {\n  TextEditingController _titleController\n  TextEditingController _descriptionController\n  GlobalKey<FormState> _formKey\n\n  _submitForm()\n}\n\nAddTodoForm o-- AddTodoFormState\nAddTodoFormState o-- Todo\n@enduml",
      "methods": [
        {
          "name": "initState",
          "description": "Initializes the TextEditingControllers with the initial todo data, if provided.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Disposes of the TextEditingControllers when the widget is removed from the widget tree.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "_submitForm",
          "description": "Validates the form, creates a new Todo instance with the user-provided data, and calls the onSubmit callback with the new todo.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "build",
          "description": "Builds the UI for the AddTodoForm, including text input fields for the title and description, and a submit button.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:todo_tracker/models/todo.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within a Flutter-based application. It uses the Stacked architecture pattern and the StackedNavigator package to provide a centralized and declarative way of defining and managing the application's navigation flow.",
      "class_diagram": "@startuml\nclass Routes {\n  static String homeView\n  static String startupView\n  static Set<String> all\n}\n\nclass StackedRouter extends RouterBase {\n  List<RouteDef> get routes()\n  Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension {\n  Future<dynamic> navigateToHomeView()\n  Future<dynamic> navigateToStartupView()\n  Future<dynamic> replaceWithHomeView() \n  Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "Routes.homeView",
          "description": "Static constant for the '/home-view' route.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "Routes.startupView",
          "description": "Static constant for the '/startup-view' route.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "Routes.all",
          "description": "Set of all defined routes in the application.",
          "parameters": null,
          "return_type": "Set<String>"
        },
        {
          "name": "StackedRouter.routes",
          "description": "List of route definitions that the router can handle.",
          "parameters": null,
          "return_type": "List<RouteDef>"
        },
        {
          "name": "StackedRouter.pagesMap",
          "description": "Map of page types to their corresponding route factory functions.",
          "parameters": null,
          "return_type": "Map<Type, StackedRouteFactory>"
        },
        {
          "name": "NavigatorStateExtension.navigateToHomeView",
          "description": "Navigates to the '/home-view' route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.navigateToStartupView",
          "description": "Navigates to the '/startup-view' route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithHomeView",
          "description": "Replaces the current route with the '/home-view' route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "NavigatorStateExtension.replaceWithStartupView",
          "description": "Replaces the current route with the '/startup-view' route.",
          "parameters": [
            "int? routerId",
            "bool preventDuplicates",
            "Map<String, String>? parameters",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_tracker/features/home/home_view.dart",
        "todo_tracker/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/todo_options/todo_options_sheet.dart",
      "description": "This file defines the `TodoOptionsSheet` class, which is responsible for presenting a bottom sheet UI component that allows the user to filter their todo items by showing either pending or completed tasks.",
      "class_diagram": "@startuml\nclass TodoOptionsSheet {\n  +Function(SheetResponse)? completer\n  +SheetRequest request\n  +Widget build(BuildContext)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the bottom sheet, which includes a title and two radio buttons for selecting whether to show pending or completed todo items.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up and managing the dependency injection (DI) system for the application using the Stacked architecture. It provides a centralized location to register services and dependencies that can be accessed throughout the application.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "Registers the necessary services and dependencies in the Stacked Locator, which acts as the DI container. This method can be called to set up the DI system with optional environment-specific configurations.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_item.dart",
      "description": "This Dart file defines a `TodoItem` widget that represents a single task or to-do item in a todo list application. The widget is responsible for displaying the details of a todo item, including its title, description, creation and completion dates, and providing interactions for toggling the completion status, editing, and deleting the item.",
      "class_diagram": "@startuml\nclass TodoItem extends StatelessWidget {\n  +final Todo todo\n  +final VoidCallback onToggle\n  +final VoidCallback onDelete\n  +final VoidCallback onEdit\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for rendering a single todo item, including the checkbox, title, description, creation and completion dates, and edit/delete buttons.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:intl/intl.dart",
        "package:todo_tracker/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of utility functions and constants that help with the layout and styling of UI elements in a Flutter application. It serves as a centralized place for managing common UI-related functionality, promoting consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const double _tinySize\n  + static const double _smallSize\n  + static const double _mediumSize\n  + static const double _largeSize\n  + static const double _massiveSize\n\n  + static Widget horizontalSpaceTiny\n  + static Widget horizontalSpaceSmall\n  + static Widget horizontalSpaceMedium\n  + static Widget horizontalSpaceLarge\n\n  + static Widget verticalSpaceTiny\n  + static Widget verticalSpaceSmall\n  + static Widget verticalSpaceMedium\n  + static Widget verticalSpaceLarge\n  + static Widget verticalSpaceMassive\n\n  + static Widget spacedDivider\n\n  + static Widget verticalSpace(double height)\n\n  + static double screenWidth(BuildContext context)\n  + static double screenHeight(BuildContext context)\n\n  + static double screenHeightFraction(BuildContext context, {int dividedBy, double offsetBy, double max})\n  + static double screenWidthFraction(BuildContext context, {int dividedBy, double offsetBy, double max})\n\n  + static double halfScreenWidth(BuildContext context)\n  + static double thirdScreenWidth(BuildContext context)\n  + static double quarterScreenWidth(BuildContext context)\n\n  + static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + static double getResponsiveSmallFontSize(BuildContext context)\n  + static double getResponsiveMediumFontSize(BuildContext context)\n  + static double getResponsiveLargeFontSize(BuildContext context)\n  + static double getResponsiveExtraLargeFontSize(BuildContext context)\n  + static double getResponsiveMassiveFontSize(BuildContext context)\n\n  + static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a small horizontal space of 5 units.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a vertical space of the specified height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen in the current context.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "A function that returns a fraction of the screen height, optionally with an offset and a maximum value.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that returns a responsive font size based on the screen width and a given font size and maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. These colors are intended to establish a consistent visual theme and branding for the app.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This file defines the NoticeSheet class, which is responsible for displaying a bottom sheet with a notice or message. It is used to present important information to the user, such as success or error messages, updates, or other notifications.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  +NoticeSheet(completer, request)\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n}\n\nNoticeSheet --o NoticeSheetModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the bottom sheet, displaying the title and description provided in the SheetRequest.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the NoticeSheetModel, which is used to manage the state and logic of the bottom sheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_tracker/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "todo_tracker/ui/common/app_colors.dart",
        "todo_tracker/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the view model for an information alert dialog in a Flutter application. The primary purpose of this class is to encapsulate the state and behavior related to displaying an information alert dialog to the user.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "The TodoService class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for a list of Todo items. It serves as the central service for handling todo-related data and logic, enabling other parts of the application to interact with the todo list.",
      "class_diagram": "@startuml\nclass TodoService {\n  - _todos: List<Todo>\n  + get todos: List<Todo>\n  + addTodo(Todo todo)\n  + updateTodo(Todo todo)\n  + deleteTodo(String id)\n  + toggleTodoCompletion(String id)\n  + getTodosByStatus(bool isCompleted): List<Todo>\n}\n@enduml",
      "methods": [
        {
          "name": "get todos",
          "description": "Returns an unmodifiable list of all the Todo items.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new Todo item to the list of todos.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing Todo item in the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Removes a Todo item from the list based on its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a Todo item and updates its completion timestamp.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "getTodosByStatus",
          "description": "Returns a list of Todo items filtered by their completion status.",
          "parameters": [
            "bool isCompleted"
          ],
          "return_type": "List<Todo>"
        }
      ],
      "dependencies": [
        "todo_tracker/models/todo.dart"
      ]
    },
    {
      "name": "lib/features/home/todos_repository.dart",
      "description": "The TodosRepository class is responsible for managing the application's todo list, including adding, updating, deleting, and toggling the completion status of todo items. It acts as an intermediary between the UI components and the TodoService, which handles the actual storage and retrieval of todo data.",
      "class_diagram": "@startuml\nclass TodosRepository {\n  - TodoService _todoService\n  + List<Todo> get allTodos\n  + List<Todo> get completedTodos\n  + List<Todo> get pendingTodos\n  + void addTodo(Todo todo)\n  + void updateTodo(Todo todo)\n  + void deleteTodo(String id)\n  + void toggleTodoCompletion(String id)\n}\n\nTodosRepository o-- TodoService\n@enduml",
      "methods": [
        {
          "name": "get allTodos",
          "description": "Returns a list of all todo items.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "get completedTodos",
          "description": "Returns a list of all completed todo items.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "get pendingTodos",
          "description": "Returns a list of all pending (incomplete) todo items.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the repository.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": null
        },
        {
          "name": "deleteTodo",
          "description": "Deletes a todo item from the repository.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Toggles the completion status of a todo item.",
          "parameters": [
            "String id"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:todo_tracker/app/app.locator.dart",
        "package:todo_tracker/models/todo.dart",
        "package:todo_tracker/services/todo_service.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up the custom bottom sheet UI in the application. It defines the different types of bottom sheets that can be used and provides the necessary configuration to the BottomSheetService from the stacked_services package.",
      "class_diagram": "@startuml\nclass BottomSheetType {\n  notice\n}\n\nclass SetupBottomSheetUi {\n  +void setupBottomSheetUi()\n}\n\nBottomSheetType o-- NoticeSheet\nSetupBottomSheetUi --> BottomSheetService\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the custom bottom sheet builders for the different BottomSheetType values. It registers the NoticeSheet builder for the 'notice' bottom sheet type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/todo_dialog/todo_dialog.dart",
      "description": "The `TodoDialog` class is responsible for displaying a modal dialog that allows users to create or edit a todo item. It provides a standardized interface for managing todo-related functionality within the application.",
      "class_diagram": "@startuml\nclass TodoDialog {\n  +Widget build(BuildContext context)\n  -void completer(DialogResponse)\n}\n\nTodoDialog -down-> AddTodoForm\nTodoDialog -up-> DialogRequest\nTodoDialog -up-> DialogResponse\n@endumL",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI for the TodoDialog, including the AddTodoForm and cancel button.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "completer",
          "description": "Callback function that is invoked when the user submits the todo form or cancels the dialog.",
          "parameters": [
            "DialogResponse"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart",
        "package:todo_tracker/features/home/widgets/add_todo_form.dart",
        "package:todo_tracker/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "The `InfoAlertDialog` class is responsible for displaying an information alert dialog in the Todo Tracker application. It provides a reusable and customizable way to present important information to the user, such as app updates or feature announcements.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  + builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog --> InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the visual representation of the `InfoAlertDialog`. It takes in the `BuildContext`, the `InfoAlertDialogModel`, and an optional `Widget` and returns the final `Widget` to be displayed.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `InfoAlertDialogModel`, which is used to manage the state and behavior of the `InfoAlertDialog`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_tracker/ui/common/app_colors.dart",
        "todo_tracker/ui/common/ui_helpers.dart",
        "todo_tracker/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/theme/app_theme.dart",
      "description": "This Dart file defines the application-wide theme for a Flutter app, including the light theme configuration. It provides a centralized and reusable way to manage the visual style and appearance of the app.",
      "class_diagram": "@startuml\nclass AppTheme {\n  + static ThemeData get lightTheme\n}\n@enduml",
      "methods": [
        {
          "name": "lightTheme",
          "description": "Returns the light theme configuration for the application, including the primary color, scaffold background color, app bar, floating action button, card, and input decoration styles.",
          "parameters": null,
          "return_type": "ThemeData"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is responsible for managing the state and behavior of the notice bottom sheet in the application. It serves as the view model for the notice bottom sheet UI.",
      "class_diagram": "@startuml\n  class NoticeSheetModel extends BaseViewModel {\n  }\n  @enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodosRepository\nparticipant TodoService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodosRepository: Initialize todo data\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nHomeViewModel -> TodosRepository: Get todo items\nUser -> HomeView: Interact (add, update, delete todo)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodosRepository: Perform CRUD operations\nTodosRepository -> TodoService: Perform CRUD operations\nHomeViewModel -> DialogService: Show todo dialog\nHomeViewModel -> BottomSheetService: Show todo options bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view has a corresponding ViewModel that handles the business logic and state for that view. The ViewModels interact with the TodosRepository, which serves as an intermediary between the UI and the TodoService. The TodoService is responsible for managing the CRUD operations on the todo list. This separation of concerns allows for a clean and maintainable state management flow across the application.",
  "navigation_flow": "The navigation in the application is managed using the Stacked Router, defined in the app.router.dart file. The main navigation flows include launching the application, which starts with the StartupView, and then navigating to the HomeView. The HomeView also handles navigation to custom dialogs and bottom sheets for creating, editing, and managing todo items."
}